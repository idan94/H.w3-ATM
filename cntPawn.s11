.=torg + 1000
main:		mov #main, sp
			mov #0, -(sp) ; place in stack for the return value
			mov #Board, -(sp)
			mov Player, -(sp)
			jsr pc, CntPawn
			mov 4(sp), r5  ;; for tests: see in pdp if its really count!
			halt

		 	; a branch that count the player (given in the stack, by value) pawns on board ( given in stack , by adress). 
			; stack order: [1.board 2. player 3. linking register]
			; use: 
			;r0 for iterating over the board. ; r3 is the number of squares in the board(for sob) ; r2 is the player number
			; r4 is a counter
cntPawn:	
; -----------------  push the registers we use to the stack: -----------------  
			mov r3, -(sp)
			mov r2, -(sp)
			mov r0, -(sp)
			mov r4, -(sp)
			clr r4
; -----------------  iniitilize registers values: -----------------  
			mov #64., r3 		; for loop control ( num of squares)
			mov 14(sp), r0		; r0 point to the first square address now
			mov 12(sp), r2		; r2 contain the player we count 
chkLoop:	
			cmp (r0), r2
			beq addPawn
loopEnd:	add #2, r0
			sob r3, chkLoop
			mov r4, 16(sp) ; save the return value in the stack
			mov (sp)+, r4
			mov (sp)+, r0
			mov (sp)+, r2
			mov (sp)+, r3
			rts pc
addPawn:	add #1, r4	
			br loopEnd

Board:		.word	0,	1,	0,	1,	0,	1,	0,	1
			.word	0,	0,	0,	0,	0,	0,	0,	0
			.word	0,	0,	0,	0,	0,	0,	0,	0
			.word	0,	0,	0,	0,	0,	0,	0,	0
			.word	0,	0,	0,	0,	0,	0,	0,	0
			.word	0,	0,	0,	0,	0,	0,	0,	0
			.word	0,	0,	0,	0,	0,	0,	0,	0
			.word	0,	0,	0,	0,	0,	0,	0,	0
			
Player:		.word	1
